#This file is part of https://gitlab.com/oprudkyi/openshift-templates
#
#Copyright (c) 2024 Florient 
#
apiVersion: v1
kind: Template
labels:
  template: hostmount-official-mysql-percona-mariadb
metadata:
  annotations:
    description: |
      Runs official MySQL(or Percona/MariaDB) images from official repositories at docker hub.
      It uses local fs on node (hostmount SCC) to store files.

      Before you start, please setup Security Context Constraints (SCC) for service accounts used for running 
      container (hostmount-anyuid means commands inside containers can run as root and access host file system)
        oc login -u system:admin
        oc adm policy add-scc-to-user hostmount-anyuid -z sa-hostmount-mysql -n CURRENT_PROJECT_NAME
      Based on mysql-ephemeral-template.yml

    tags: database
    openshift.io/display-name: Mysql/Percona/MariaDB (uses hostmount)
  creationTimestamp: null
  name: hostmount-official-mysql-percona-mariadb
parameters:
- displayName: Data Path
  description: Host/Node path for database files, mounted as /var/lib/mysql inside container
  name: MYSQL_DATA_PATH
  required: true
- displayName: Database Service Name
  name: MYSQL_SERVICE_NAME
  required: true
  value: hostmount-mysql
- displayName: Database Name
  name: MYSQL_DATABASE
  required: true
  value: homestead
  description: Used for fresh database only
- displayName: Database User
  name: MYSQL_USER
  required: true
  value: homestead
  description: Used for fresh database only
- displayName: Database Password
  name: MYSQL_PASSWORD
  value: secret 
  required: true
  description: Used for fresh database only
- displayName: Root Password
  name: MYSQL_ROOT_PASSWORD
  value: root 
  required: true
  description: Used for fresh database only
- description: |
    Repositiry of image (mysql, percona or mariadb). Will use https://hub.docker.com/r/library/mysql/ , 
    https://hub.docker.com/r/library/percona/ or https://hub.docker.com/r/library/mariadb/.
    You may try "oprudkyi/percona-latest" as it fixes https://github.com/docker-library/percona/issues/40
  displayName: Image Repository at Docker Hub
  name: DOCKER_REPOSITORY
  value: "percona"
  required: true
- description: |
    Tag of image (5.5, 5.6, 5.7 or latest). Check https://hub.docker.com/r/library/mysql/tags/ , 
    https://hub.docker.com/r/library/percona/tags/ ,
    https://hub.docker.com/r/library/mariadb/tags/
    for list of supported values 
  displayName: Image Tag at Docker Hub
  name: DOCKER_TAG
  value: "latest"
  required: true

- description: SQL mode of server.
  displayName: SQL mode
  name: MYSQL_SQL_MODE
  required: false
  value: "ONLY_FULL_GROUP_BY,STRICT_TRANS_TABLES,NO_ENGINE_SUBSTITUTION"

- description: The size of the buffer pool where InnoDB caches table and index data.
  displayName: innodb_buffer_pool_size
  name: MYSQL_INNODB_BUFFER_POOL_SIZE
  required: true
  value: "256M"

- description: The size of the buffer used for index blocks.
  displayName: key_buffer_size
  name: MYSQL_KEY_BUFFER_SIZE
  required: true
  value: "8m"

- description: Maximum amount of memory the MySQL container can use (Please ensure your other settings are compatible with this limit, otherways you may get weird errors like 'Table is full' etc).
  displayName: Memory Limit (MySQL)
  name: MYSQL_MEMORY_LIMIT
  required: true
  value: 512Mi

- description: Additional mysql.cnf lines in format param_name=value
  displayName: Additional mysql.cnf lines 
  name: MYSQL_CNF_LINE
  required: false
  value: ""


objects:
- apiVersion: v1
  kind: ServiceAccount
  metadata:
    name: sa-hostmount-mysql
- apiVersion: v1
  kind: ImageStream
  metadata:
    creationTimestamp: null
    labels:
      app: hostmount-official-mysql-percona-mariadb
    name: is-${MYSQL_SERVICE_NAME}
  spec:
    dockerImageRepository: ""
    tags:
      -
       from:
         kind: DockerImage
         name: ${DOCKER_REPOSITORY}:${DOCKER_TAG}
       name: ${MYSQL_SERVICE_NAME}_pseudo_tag
       importPolicy:
         scheduled: true
  status:
    dockerImageRepository: ""
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: cm-${MYSQL_SERVICE_NAME}-my-cnf
  data:
    my.cnf: |
        #you have to manually restart/redeploy service after editing Config Map to use new values
        [mysqld]

        sql_mode = "${MYSQL_SQL_MODE}"
        innodb_buffer_pool_size = ${MYSQL_INNODB_BUFFER_POOL_SIZE}
        key_buffer_size = ${MYSQL_KEY_BUFFER_SIZE}
        ${MYSQL_CNF_LINE}

- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: Exposes the database server
    name: ${MYSQL_SERVICE_NAME}
  spec:
    ports:
    - name: 3306-mysql
      port: 3306
      targetPort: 3306
    selector:
      name: ${MYSQL_SERVICE_NAME}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    annotations:
      description: Defines how to deploy the database
    name: dc-${MYSQL_SERVICE_NAME}
  spec:
    replicas: 1
    selector:
      name: ${MYSQL_SERVICE_NAME}
    strategy:
      type: Recreate
    template:
      metadata:
        creationTimestamp: null
        labels:
          name: ${MYSQL_SERVICE_NAME}
        name: ${MYSQL_SERVICE_NAME}
      spec:
        containers:
        - env:
          - name: MYSQL_USER
            value: ${MYSQL_USER}
          - name: MYSQL_PASSWORD
            value: ${MYSQL_PASSWORD}
          - name: MYSQL_DATABASE
            value: ${MYSQL_DATABASE}
          - name: MYSQL_ROOT_PASSWORD
            value: ${MYSQL_ROOT_PASSWORD}
          image: ' '
          livenessProbe:
            initialDelaySeconds: 30
            tcpSocket:
              port: 3306
            timeoutSeconds: 1
          name: cnt-mysql
          ports:
          - containerPort: 3306
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - MYSQL_PWD='${MYSQL_PASSWORD}' mysql -h 127.0.0.1 -u ${MYSQL_USER}
                -D ${MYSQL_DATABASE} -e 'SELECT 1'
            initialDelaySeconds: 5
            timeoutSeconds: 1
          resources:
            limits:
              memory: ${MYSQL_MEMORY_LIMIT}
          volumeMounts:
          - mountPath: /var/lib/mysql
            name: vol-${MYSQL_SERVICE_NAME}
          - mountPath: /etc/mysql/conf.d
            name: vol-${MYSQL_SERVICE_NAME}-my-cnf
          terminationMessagePath: /dev/termination-log
        serviceAccountName: sa-hostmount-mysql
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        volumes:
        - hostPath: 
            path: ${MYSQL_DATA_PATH}
          name: vol-${MYSQL_SERVICE_NAME}
        - configMap:
            name: cm-${MYSQL_SERVICE_NAME}-my-cnf
          name: vol-${MYSQL_SERVICE_NAME}-my-cnf
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - cnt-mysql
        from:
          kind: ImageStreamTag
          name: is-${MYSQL_SERVICE_NAME}:${MYSQL_SERVICE_NAME}_pseudo_tag
        lastTriggeredImage: ""
      type: ImageChange
    - type: ConfigChange